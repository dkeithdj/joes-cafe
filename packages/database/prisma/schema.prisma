generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  transaction Transaction[]
}

model Order_Status {
  id     Int     @id
  status Status
  order  Order[]
}

model Staff {
  id         String  @id @default(cuid())
  first_name String
  last_name  String
  order      Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  isAvailable Boolean   @default(true)
  products    Product[]
}

model PaymentMethod {
  id          String  @id @default(cuid())
  paymentType String
  order       Order[]
}

model Table {
  id     String  @id @default(cuid())
  number Int
  Order  Order[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Int
  description String?
  image       String?
  isAvailable Boolean
  categoryId  String
  Items       Items[]
  category    Category @relation(fields: [categoryId], references: [id])
}

model Items {
  id            String      @id @default(cuid())
  productId     String
  transactionId String
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id         String   @id @default(cuid())
  customerId String
  items      Items[]
  order      Order[]
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Order {
  id            String         @id @default(cuid())
  date          DateTime       @default(now())
  totalAmount   Int
  staffId       String?
  tableId       String
  transactionId String
  statusId      Int            @default(1)
  paymentId     String?
  paymentMethod PaymentMethod? @relation(fields: [paymentId], references: [id])
  staff         Staff?         @relation(fields: [staffId], references: [id])
  status        Order_Status   @relation(fields: [statusId], references: [id])
  table         Table          @relation(fields: [tableId], references: [id])
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
}

view itemsview {
  id            String  @id
  productid     String
  productname   String
  productimage  String?
  productprice  Int
  totalquantity Int
  totalamount   Int
  transactionid String
}

enum Status {
  Processing
  Completed
  Declined
  Accepted
  Preparing
  Brewing
}
